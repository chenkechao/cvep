var x=Object.create,f=Object.defineProperty,j=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty,_=Object.getOwnPropertyNames,P=Object.getOwnPropertyDescriptor;var C=t=>f(t,"__esModule",{value:!0});var M=(t,e,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of _(e))!O.call(t,i)&&i!=="default"&&f(t,i,{get:()=>e[i],enumerable:!(r=P(e,i))||r.enumerable});return t},o=t=>t&&t.__esModule?t:M(C(f(t!=null?x(j(t)):{},"default",{value:t,enumerable:!0})),t);var S=o(require("vite")),b=o(require("fs")),n=o(require("path")),R=o(require("esbuild")),l=o(require("chalk")),h=class{constructor(){this.root=n.join(__dirname,"../");this.pkg=n.join(this.root,"package.json");this.main=n.join(this.root,"src/main");this.render=n.join(this.root,"src/render");this.outDir=n.join(this.root,"dist");this.mainEntrySrc="";this.mainEntry="";this.outFlag={vite:l.green("[vite] "),electron:l.blue("[electron] "),control:l.rgb(190,33,64)("[control] ")}}async init(){let e;try{e=require(this.pkg)}catch(i){console.error(i),process.exit()}if(e.main)this.mainEntrySrc=n.join(this.root,e.main);else for(let i of b.readdirSync(this.main))if(i.startsWith("entry")){this.mainEntrySrc=n.join(this.main,i);break}let r=await S.resolveConfig({},"build");this.outDir=r.build.outDir,this.mainEntry=n.join(this.outDir,"__entry.js")}buildMain(e=!0){return e&&(process.env.CVE_ENV="development"),R.buildSync({bundle:!0,entryPoints:[this.mainEntrySrc],external:["electron"],platform:"node",minify:!e,outfile:this.mainEntry})}};var u=o(require("vite")),p=o(require("chalk")),m=o(require("fs")),k=o(require("child_process")),E=o(require("chokidar")),v=class extends h{constructor(){super(...arguments);this.isReStart=!1}async runRender(){let e=await u.resolveConfig({},"serve");this.port=e.server.port?e.server.port:3e3,this.viteServer=await u.createServer({server:{port:this.port}});let r=this.viteServer.httpServer;if(r!=null)return new Promise(i=>{let a=c=>{c.code==="EADDRINUSE"?e.server.strictPort?(console.error(p.red`[viteError] Port ${this.port} is already in use`),process.exit()):(console.log(this.outFlag.vite+`Port ${this.port} is in use, trying another one...`),r.listen(++this.port)):(console.error(p.red`[viteError] ${c}`),process.exit())};r.on("error",a),r.listen(this.port,()=>{r.removeListener("error",a),console.log(this.outFlag.vite+`Dev server running at:${this.port}`),i("")})});console.error(p.red`[viteError] httpServer Create a failure`)}async runElectron(){await this.init().catch(r=>{console.error(p.red`[contorlError] init failed:\n${r}`)}),this.buildMain();let e;try{e=require("electron")}catch(r){console.error(r),process.exit()}this.electron=k.spawn(e.toString(),[this.mainEntry]),this.electron.on("close",()=>{this.isReStart?(this.isReStart=!1,this.runElectron()):(this.viteServer.close(),process.exit())}),process.on("exit",()=>{m.existsSync(this.outDir)&&m.rmdirSync(this.outDir,{recursive:!0})}),this.electron.stdout.on("data",r=>{r.toString().trim().length>0&&console.log(this.outFlag.electron+`${r.toString()}`)}),console.log(this.outFlag.control+`Start time: ${Date.now()-this.oldTime}ms`)}mainHMR(){E.watch(this.main).on("change",()=>{console.log(this.outFlag.control+`entry file change.restart at ${new Date}`),this.isReStart=!0,this.electron.kill(),this.oldTime=Date.now()})}async run(){this.oldTime=Date.now(),await this.runRender(),process.env.CVE_PORT=this.port+"",await this.runElectron(),this.mainHMR()}};var w=o(require("vite")),s=o(require("fs")),D=o(require("electron-builder")),d=o(require("path")),g=o(require("chalk")),y=class extends h{async buildRender(){await w.build()}getMIRROR(){let e="",r=d.join(this.root,".npmrc");if(s.existsSync(r)){e=s.readFileSync(r).toString();let i=e.split(/[(\r\n)\r\n]+/);for(let a=0;a<i.length;a++){let c=i[a].split("=");if(c[0]=="ELECTRON_MIRROR"){e=c[1];break}}}return e}async buildProject(){s.mkdirSync(d.join(this.outDir,"node_modules"));let e=this.getMIRROR();await D.build({projectDir:this.outDir,config:{directories:{output:d.join(this.root,"release")},extends:null,electronDownload:{mirror:e}}})}mkPkgJson(){let e;try{e=require(this.pkg)}catch(i){console.error(i),process.exit()}e.main||(e.main="__entry.js");let r=e.dependencies.electron.replace("^","");return delete e.scripts,delete e.dependencies,delete e.devDependencies,e.dependencies={electron:r},s.writeFileSync(d.join(this.outDir,"package.json"),JSON.stringify(e,null,2)),e}async run(){await this.init().catch(e=>{console.error(g.red`[contorlError] init failed:\n${e}`)}),await this.buildRender(),this.buildMain(),this.mkPkgJson(),await this.buildProject().catch(e=>{console.error(g.red`[electronBuilderError] \n${e}`),process.exit()}),console.log(this.outFlag.control+" The packaged application is complete")}};var $=process.argv.slice(2)[0];async function F(){switch($){case"build":await new y().run();break;case"dev":await new v().run();break;default:console.log("The argument should be dev or build")}}F().catch(t=>{console.log(t)});
